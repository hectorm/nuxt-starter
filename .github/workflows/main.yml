# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: "Main"

on:
  push:
    tags: ["*"]
    branches: ["*"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:

permissions: {}

jobs:
  build:
    name: "Build on ${{ matrix.runtime.name }} (${{ matrix.platform.arch }})"
    runs-on: "ubuntu-latest"
    permissions:
      contents: "read"
    strategy:
      fail-fast: false
      matrix:
        runtime:
          - id: "node"
            name: "Node.js"
            dockerfile: "./Dockerfile"
          # - id: "bun"
          #   name: "Bun"
          #   dockerfile: "./Dockerfile.bun"
        platform:
          - id: "linux-amd64"
            arch: "linux/amd64"
          - id: "linux-arm64-v8"
            arch: "linux/arm64/v8"
    steps:
      - name: "Checkout"
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683"
      - name: "Export runtime variables"
        uses: "hectorm/ghaction-runtime-export@c8ec870e62dd2ab91765f8a65e244c3ce842227c"
      - name: "Set up Docker Buildx"
        uses: "hectorm/ghaction-docker-buildx-setup@fec3efdbb455c2aa58a4fbfd11a9853f5de2cdba"
      - name: "Build"
        uses: "hectorm/ghaction-docker-buildx-build@298dc8203fa9957709e55a37b4b40181618205bb"
        with:
          dockerfile: "${{ matrix.runtime.dockerfile }}"
          platforms: "${{ matrix.platform.arch }}"
          cache-from: "type=gha,scope=${{ matrix.runtime.id }}-${{ matrix.platform.id }}"
          cache-to: "type=gha,scope=${{ matrix.runtime.id }}-${{ matrix.platform.id }},mode=max"

  test:
    name: "Test on ${{ matrix.runtime.name }} (${{ matrix.platform.arch }})"
    needs: ["build"]
    runs-on: "ubuntu-latest"
    permissions:
      contents: "read"
    strategy:
      fail-fast: false
      matrix:
        runtime:
          - id: "node"
            name: "Node.js"
            dockerfile: "./Dockerfile"
          # - id: "bun"
          #   name: "Bun"
          #   dockerfile: "./Dockerfile.bun"
        platform:
          - id: "linux-amd64"
            arch: "linux/amd64"
          - id: "linux-arm64-v8"
            arch: "linux/arm64/v8"
    env:
      COMPOSE_FILE: "./compose.keycloak.yaml:./compose.ci.yaml"
      COMPOSE_PROFILES: "production"
      COMPOSE_OVERRIDE: |
        services:
          app:
            platform: "${{ matrix.platform.arch }}"
            build:
              dockerfile: "${{ matrix.runtime.dockerfile }}"
              cache_from: ["type=gha,scope=${{ matrix.runtime.id }}-${{ matrix.platform.id }}"]
    steps:
      - name: "Checkout"
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683"
      - name: "Export runtime variables"
        uses: "hectorm/ghaction-runtime-export@c8ec870e62dd2ab91765f8a65e244c3ce842227c"
      - name: "Set up Docker Buildx"
        uses: "hectorm/ghaction-docker-buildx-setup@fec3efdbb455c2aa58a4fbfd11a9853f5de2cdba"
      - name: "Test"
        run: |
          printenv COMPOSE_OVERRIDE > ./compose.ci.yaml
          docker compose up --detach --wait --wait-timeout 300
      - name: "After test"
        if: "always()"
        run: |
          docker compose logs --tail all
          docker compose down --volumes
          docker compose rm --force

  publish-docker:
    name: "Publish Docker images"
    if: "startsWith(github.ref, 'refs/tags/v') || github.ref_name == github.event.repository.default_branch"
    needs: ["test"]
    runs-on: "ubuntu-latest"
    permissions:
      contents: "read"
      packages: "write"
    steps:
      - name: "Checkout"
        uses: "actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683"
      - name: "Export runtime variables"
        uses: "hectorm/ghaction-runtime-export@c8ec870e62dd2ab91765f8a65e244c3ce842227c"
      - name: "Set up Docker Buildx"
        uses: "hectorm/ghaction-docker-buildx-setup@fec3efdbb455c2aa58a4fbfd11a9853f5de2cdba"
      - name: "Login to GitHub Container Registry"
        if: "github.event_name != 'pull_request'"
        uses: "docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772"
        with:
          registry: "ghcr.io"
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"
      - name: "Extract metadata"
        id: "meta"
        uses: "docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804"
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
      - name: "Push"
        uses: "hectorm/ghaction-docker-buildx-build@298dc8203fa9957709e55a37b4b40181618205bb"
        with:
          dockerfile: "./Dockerfile"
          platforms: |
            linux/amd64
            linux/arm64/v8
          tags: |
            ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
          push: "${{ github.event_name != 'pull_request' }}"
          cache-from: |
            type=gha,scope=node-linux-amd64
            type=gha,scope=node-linux-arm64-v8

  publish-github-release:
    name: "Publish GitHub release"
    if: "startsWith(github.ref, 'refs/tags/v')"
    needs: ["test"]
    runs-on: "ubuntu-latest"
    permissions:
      contents: "write"
    steps:
      - name: "Publish"
        uses: "hectorm/ghaction-release@066200d04c3549852afa243d631ea3dc93390f68"
