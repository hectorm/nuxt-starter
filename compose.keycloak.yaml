# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json
name: "app"

# https://hub.docker.com/_/traefik
x-traefik-image: &traefik-image "docker.io/traefik:3.3"
# https://hub.docker.com/r/keycloak/keycloak
x-keycloak-image: &keycloak-image "docker.io/keycloak/keycloak:26.2"
# https://hub.docker.com/_/postgres
x-postgres-image: &postgres-image "docker.io/postgres:17-bookworm"

services:
  traefik:
    image: *traefik-image
    container_name: "app-traefik"
    hostname: "traefik"
    restart: "always"
    networks:
      - "public"
      - "private"
    ports:
      - "80:80/tcp"
      - "443:443/tcp"
      - "443:443/udp"
      - "127.0.0.1:5432:5432/tcp"
      - "127.0.0.1:8080:8080/tcp"
    volumes:
      - { type: "bind", source: "/var/run/docker.sock", target: "/var/run/docker.sock", read_only: true }
      - { type: "tmpfs", target: "/run/" }
      - { type: "tmpfs", target: "/tmp/", tmpfs: { mode: 0o1777 } }
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--api.disableDashboardAd=true"
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80/tcp"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443/tcp"
      - "--entrypoints.websecure.http3.advertisedPort=443"
      - "--entrypoints.postgres.address=:5432/tcp"
      - "--ping=true"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      start_period: "60s"
      start_interval: "5s"
      interval: "10s"
      timeout: "10s"
      retries: 2

  app:
    profiles: ["production"]
    image: "localhost/app:latest"
    build: { context: "./", dockerfile: "${COMPOSE_DOCKERFILE:-./Dockerfile}" }
    container_name: "app"
    hostname: "app"
    labels:
      traefik.enable: "true"
      traefik.http.routers.app.rule: "Host(`app.localhost`)"
      traefik.http.routers.app.entryPoints: "websecure"
      traefik.http.routers.app.tls: "true"
      traefik.http.routers.app.service: "app@docker"
      traefik.http.routers.app.middlewares: "compress@docker"
      traefik.http.services.app.loadBalancer.server.port: "3000"
      traefik.http.middlewares.compress.compress.includedContentTypes: "application/json,application/wasm,application/xml,image/svg+xml,text/css,text/html,text/javascript,text/plain"
    restart: "always"
    networks:
      - "private"
    read_only: true
    volumes:
      - { type: "tmpfs", target: "/run/" }
      - { type: "tmpfs", target: "/tmp/", tmpfs: { mode: 0o1777 } }
    environment:
      PRISMA_DATABASE_URL: "postgresql://app:password@postgres:5432/app"
      PRISMA_SHADOW_DATABASE_URL: "postgresql://app:password@postgres:5432/app_shadow"
      PRISMA_LOAD_SAMPLE_DATA: "true"
      NUXT_AUTH_OIDC_ROOT_URL: "https://app.localhost"
      NUXT_AUTH_OIDC_CLIENT_ID: "app"
      NUXT_AUTH_OIDC_CLIENT_SECRET: "ourclientbythesewordsguarded"
      NUXT_AUTH_OIDC_ISSUER: "https://idp.localhost/realms/acme"
      NUXT_AUTH_OIDC_AUTHORIZATION_ENDPOINT: "https://idp.localhost/realms/acme/protocol/openid-connect/auth"
      NUXT_AUTH_OIDC_TOKEN_ENDPOINT: "http://keycloak:8080/realms/acme/protocol/openid-connect/token"
      NUXT_AUTH_OIDC_USER_INFO_ENDPOINT: "http://keycloak:8080/realms/acme/protocol/openid-connect/userinfo"
      NUXT_AUTH_OIDC_END_SESSION_ENDPOINT: "https://idp.localhost/realms/acme/protocol/openid-connect/logout"
      NUXT_AUTH_OIDC_JWKS_URI: "http://keycloak:8080/realms/acme/protocol/openid-connect/certs"
      NUXT_AUTH_OIDC_ENFORCE_HTTPS: "false"
      NUXT_LOG_LEVEL: "${NUXT_LOG_LEVEL:-debug}"
    depends_on:
      keycloak:
        condition: "service_healthy"
      postgres:
        condition: "service_healthy"
      postgres-setup:
        condition: "service_completed_successfully"

  keycloak:
    image: *keycloak-image
    container_name: "app-keycloak"
    hostname: "keycloak"
    labels:
      traefik.enable: "true"
      traefik.http.routers.keycloak.rule: "Host(`idp.localhost`)"
      traefik.http.routers.keycloak.entryPoints: "websecure"
      traefik.http.routers.keycloak.tls: "true"
      traefik.http.routers.keycloak.service: "keycloak@docker"
      traefik.http.services.keycloak.loadBalancer.server.port: "8080"
    restart: "always"
    networks:
      - "private"
    volumes:
      - { type: "tmpfs", target: "/run/" }
      - { type: "tmpfs", target: "/tmp/", tmpfs: { mode: 0o1777 } }
    configs:
      - { source: "keycloak-realm.json", target: "/opt/keycloak/data/import/realm.json", mode: 0o0644 }
    environment:
      KC_HTTP_ENABLED: "true"
      KC_HTTP_HOST: "0.0.0.0"
      KC_HTTP_PORT: "8080"
      KC_HOSTNAME: "https://idp.localhost"
      KC_HEALTH_ENABLED: "true"
      KC_PROXY_HEADERS: "xforwarded"
      KC_BOOTSTRAP_ADMIN_USERNAME: "admin"
      KC_BOOTSTRAP_ADMIN_PASSWORD: "password"
      KC_DB: "postgres"
      KC_DB_URL: "jdbc:postgresql://postgres:5432/keycloak"
      KC_DB_USERNAME: "keycloak"
      KC_DB_PASSWORD: "password"
    command: ["start", "--import-realm"]
    healthcheck:
      test:
        - "CMD-SHELL"
        - |
          exec 3<>/dev/tcp/localhost/9000
          printf '%s\r\n' 'GET /health/ready HTTP/1.1' 'Host: localhost:9000' 'Connection: close' '' >&3
          grep -Fq 'HTTP/1.1 200 OK' <&3
      start_period: "60s"
      start_interval: "5s"
      interval: "10s"
      timeout: "10s"
      retries: 2
    depends_on:
      postgres:
        condition: "service_healthy"
      postgres-setup:
        condition: "service_completed_successfully"

  postgres:
    image: *postgres-image
    container_name: "app-postgres"
    hostname: "postgres"
    labels:
      traefik.enable: "true"
      traefik.tcp.routers.postgres.rule: "HostSNI(`*`)"
      traefik.tcp.routers.postgres.entryPoints: "postgres"
      traefik.tcp.routers.postgres.service: "postgres@docker"
      traefik.tcp.services.postgres.loadBalancer.server.port: "5432"
    restart: "always"
    networks:
      - "private"
    volumes:
      - { type: "volume", source: "postgres-data", target: "/var/lib/postgresql/data/" }
      - { type: "tmpfs", target: "/run/" }
      - { type: "tmpfs", target: "/tmp/", tmpfs: { mode: 0o1777 } }
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "password"
    command: >-
      -c max_connections=500
      -c shared_buffers=512MB
      -c max_wal_size=2048MB
      -c wal_compression=on
    healthcheck:
      test: ["CMD", "pg_isready", "-qU", "postgres"]
      start_period: "60s"
      start_interval: "5s"
      interval: "10s"
      timeout: "10s"
      retries: 2

  postgres-setup:
    image: *postgres-image
    container_name: "app-postgres-setup"
    hostname: "postgres-setup"
    restart: "no"
    networks:
      - "private"
    volumes:
      - { type: "tmpfs", target: "/var/lib/postgresql/data/" }
      - { type: "tmpfs", target: "/run/" }
      - { type: "tmpfs", target: "/tmp/", tmpfs: { mode: 0o1777 } }
    configs:
      - { source: "postgres-app.sql", target: "/docker-entrypoint-initdb.d/app.sql", mode: 0o0644 }
      - { source: "postgres-keycloak.sql", target: "/docker-entrypoint-initdb.d/keycloak.sql", mode: 0o0644 }
    environment:
      PGHOST: "postgres"
      PGPORT: "5432"
      PGDATABASE: "postgres"
      PGUSER: "postgres"
      PGPASSWORD: "password"
    entrypoint: "/bin/sh"
    command: ["-euxc", 'for f in /docker-entrypoint-initdb.d/*.sql; do psql -f "$${f:?}"; done']
    depends_on:
      postgres:
        condition: "service_healthy"

configs:
  keycloak-realm.json:
    content: |
      {
        "id": "00000000-0000-0000-0000-000000000000",
        "realm": "acme",
        "displayName": "ACME",
        "enabled": true,
        "attributes": {
          "frontendUrl": "https://idp.localhost"
        },
        "registrationAllowed": true,
        "resetPasswordAllowed": true,
        "rememberMe": true,
        "registrationEmailAsUsername": false,
        "loginWithEmailAllowed": true,
        "duplicateEmailsAllowed": false,
        "verifyEmail": true,
        "editUsernameAllowed": true,
        "accessTokenLifespan": 300,
        "ssoSessionIdleTimeout": 86400,
        "ssoSessionIdleTimeoutRememberMe": 7776000,
        "ssoSessionMaxLifespan": 86400,
        "ssoSessionMaxLifespanRememberMe": 7776000,
        "eventsEnabled": true,
        "eventsExpiration": 7776000,
        "clients": [
          {
            "clientId": "app",
            "enabled": true,
            "name": "App",
            "protocol": "openid-connect",
            "rootUrl": "https://app.localhost/",
            "baseUrl": "https://app.localhost/",
            "webOrigins": [
              "https://app.localhost",
              "http://localhost:3000"
            ],
            "redirectUris": [
              "https://app.localhost/api/oidc/login/callback",
              "http://localhost:3000/api/oidc/login/callback"
            ],
            "publicClient": false,
            "clientAuthenticatorType": "client-secret",
            "standardFlowEnabled": true,
            "implicitFlowEnabled": false,
            "directAccessGrantsEnabled": false,
            "serviceAccountsEnabled": false,
            "authorizationServicesEnabled": false,
            "attributes": {
              "post.logout.redirect.uris": "https://app.localhost/*##http://localhost:3000/*",
              "backchannel.logout.url": "http://app:3000/api/oidc/logout/backchannel",
              "backchannel.logout.session.required": "true"
            },
            "secret": "ourclientbythesewordsguarded",
            "protocolMappers": [
              {
                "name": "realm roles",
                "protocol": "openid-connect",
                "protocolMapper": "oidc-usermodel-realm-role-mapper",
                "config": {
                  "multivalued": "true",
                  "claim.name": "roles",
                  "jsonType.label": "String",
                  "id.token.claim": "false",
                  "access.token.claim": "false",
                  "lightweight.claim": "false",
                  "userinfo.token.claim": "true",
                  "introspection.token.claim": "false"
                }
              }
            ]
          }
        ],
        "roles": {
          "realm": [
            {
              "name": "admin",
              "composites": { "realm": ["user"] }
            },
            {
              "name": "user"
            }
          ]
        },
        "users": [
          {
            "username": "admin",
            "enabled": true,
            "firstName": "Admin",
            "lastName": "User",
            "email": "admin@localhost",
            "emailVerified": true,
            "realmRoles" : ["admin", "default-roles-acme"],
            "credentials": [{ "type": "password", "value": "password" }]
          },
          {
            "username": "alice",
            "enabled": true,
            "firstName": "Alice",
            "lastName": "Williams",
            "email": "alice@localhost",
            "emailVerified": true,
            "realmRoles" : ["user", "default-roles-acme"],
            "credentials": [{ "type": "password", "value": "password" }]
          },
          {
            "username": "bob",
            "enabled": true,
            "firstName": "Bob",
            "lastName": "Roberts",
            "email": "bob@localhost",
            "emailVerified": true,
            "realmRoles" : ["user", "default-roles-acme"],
            "credentials": [{ "type": "password", "value": "password" }]
          },
          {
            "username": "carol",
            "enabled": true,
            "firstName": "Carol",
            "lastName": "Hampton",
            "email": "carol@localhost",
            "emailVerified": true,
            "realmRoles" : ["default-roles-acme"],
            "credentials": [{ "type": "password", "value": "password" }]
          }
        ]
      }

  postgres-app.sql:
    content: |
      SELECT 'CREATE USER app PASSWORD ''password'''
      WHERE NOT EXISTS (SELECT FROM pg_user WHERE usename = 'app')\gexec
      SELECT 'CREATE DATABASE app WITH OWNER = app ENCODING = ''UTF8'' TABLESPACE = pg_default'
      WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'app')\gexec
      SELECT 'CREATE DATABASE app_shadow WITH OWNER = app ENCODING = ''UTF8'' TABLESPACE = pg_default'
      WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'app_shadow')\gexec

  postgres-keycloak.sql:
    content: |
      SELECT 'CREATE USER keycloak PASSWORD ''password'''
      WHERE NOT EXISTS (SELECT FROM pg_user WHERE usename = 'keycloak')\gexec
      SELECT 'CREATE DATABASE keycloak WITH OWNER = keycloak ENCODING = ''UTF8'' TABLESPACE = pg_default'
      WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'keycloak')\gexec

volumes:
  postgres-data:
    name: "app-postgres-data"

networks:
  public:
    name: "app-public"
    internal: false

  private:
    name: "app-private"
    internal: true
